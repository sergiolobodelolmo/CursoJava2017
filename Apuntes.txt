# CursoJava2017
apuntes del curso de Java

DIA1 - Cuestiones curso - VBOX
-------------------------------------------------------------------------------------------
COMENTARIOS DEL DIRECTOR (entrega de la actividad didáctica).

Entregar una actividad pedegógica con fecha tope 2 semanas después. ORIGINAL. 
Se pueden consultar las del año pasado en la biblioteca virtual, en el curso del año pasado.
Entregar lo que sea necesario a través de la biblioteca virtual fp.
___________________________________________________________________________________________
PLANTEAMIENTO
- Planteamiento del temario 
	Dejamos fuera GIT (a pesar de ello, hacer tarea) y Maven
	Incluimos servidor, Hibernate (traductor POO-MR), Spring, servicios web.
	3 plantillas de máquinas, w10, con media instalación, con toda la instalación.
- Cuestiones varias
	w10 host - curso/curso (fondo azul) - red por dhcp
		unidad D: carpeta DAJ. Copia de la máquina virtual y algo de software
	w10 virtual - curso/curso (fondo verde) - red por dhcp
		tiene:
			1. JDK (Java Standard Edition) - entorno básico de compilación y edición
				Incluye JRE (solo intérprete) + compilador.
			2. Notepad++
			3. Zoomit
			4. 7zip
			5. Adobe Reader
			6. XAMPP (apache, php, mysql, filezilla server, tomcat(servlets))
			7. Tomcat (una versión más moderna, no incluido en XAMPP)
			8. MySQL Workbench (permite ingeniería directa e inversa)
			9. Eclipse JEE (para la versión Enterprise de Java)
			10. Lightscreen (capturador de pantallas)
			
	red: 172.31.0.0/16 - gateway/dns server primario:172.31.0.5, dns secund:8.8.8.8
- Tareas
	crear proyecto en GitHub

___________________________________________________________________________________________
VBOX 
	Cuidado con el Identificador (clonar máquinas, no copiar sin más) y la MAC.
	archivo disco virtual: .vdi
	archivo de configuración de virtualbox: .vbox -> puedo cambiarlo a mano
___________________________________________________________________________________________
INSTALACIONES
Comprobamos lo instalado. 
Ponemos apache y mysql como servicios. 
Instalamos Tomcat con el instalador/wizard.


DIA2 - TomCat - GIT
-------------------------------------------------------------------------------------------
TOMCAT (el gato Tom)

Lo dejamos en manual para dejar que lo controle Eclipse.
Problemas posibles de instalación:
- Autenticación -> CATALINA_BASE/conf/tomcat-users.xml. Se pone usuario/pass y roles que indican lo que puedo hacer.
- No están los ejemplos -> se copia la carpeta en CATALINA_BASE/webapps
Configuración -> CATALINA_HOME/conf
- server.xml -> configuración del servidor
	<Server> Vale para parar el servicio, con una palabra clave.
	<Engine><Realm><Host name appBase (dir base) unpackWARs (autoinstalar WAR) autoDeploy (autopublicar)>


CONCEPTOS
TomCat es un entorno de ejecución de servlets.
Servlet: Escucha una solicitud HTTP y genera una respuesta HTTP (HTML, json...).
	El código es más parecido a un java de toda la vida.
	Crea un objeto respuesta y le mete dentro etiquetas HTML.
¿Cómo genero con un servlet un holamundo?. Con "echos". Para mejorarlo:
JSP: tipo de programa que sirve para presentar salida a pantalla, generar HTML.
	El código es HTML enriquecido con etiquetas de JSP <% %>. 

MVC. "V" sería JSP. "C" serían los "servlets". "M" sería java sin más.
	Lo ideal para hacer un "hola mundo", sería que servlet recoja la petición,
	se lo pasa el JSP que genera la página y se la devuelve y luego el servlet
	se la devuelve al cliente.

USO 
- Server Status (curso/curso). Administración.
- Manager App. 
Para gestionar las aplicaciones Java, los servlets. Vemos las aplicaciones instaladas en el servidor. 
Tomcat nos  permitirá: arrancarlo, pararlo, replegarlo (desactivarlo y borrar la carpeta y el war si lo hay).
Probamos:
	- /docs. Documentación de esta versión.
	- /examples. Ejemplos de servlets, jsp y websockets. 
		Se puede ver la ejecución y el código y se puede aprender mucho.
	(estas "rutas" están mapeadas, no tienen por qué coincidir con carpetas reales)
Lo desplegado está en "CATALINA_BASE/webapps". 
	Si copiamos una nueva carpeta directamente en esta, es como si desplegáramos un nueva aplicación. 
	Si copiamos un .war, trata de descomprimirlo y publicarlo. (Instalación "a mano").
Podemos desplegar también a través de la propia herramienta de despliegue de Tom.

Ejercicio: El cliente pone http://.../app/ListadoEmpleado y quiere recibir el listado de Empleados.
El que lo recibe es un servlet(C). Servlet se lo pasa a un JSP(V). Servlet usará clases de java,
(por ejemplo AccesoBD, los pojos Empleado.java y Departamento.java) para pedir a la base de datos los
datos de los empleados, en un arraylist. El arraylist se lo pasa al JSP. El JSP crea un HTML enriquecido
y se lo devuelve al servlet, que es quien se lo pasaría al cliente.

CATALINA_BASE = directorio donde está instalado TomCat.
__________________________________________________________________________________________________
ECLIPSE

Vinculamos Eclipse con TomCat. Eclipse se crea una instancia propia de configuración de tomcat.
Tiene sus propios archivos y permite cambiarlos. Son dos instancias virtuales de tomcat. Por eso
preferimos apagar el otro y controlarlo desde aquí. En realidad, es un clon del instalado en la 
máquina.

En WebContent: todo lo del proyecto que no sean .java.

Código que empieza con @ -> pseudoinstrucciones.

DIA3 - Eclipse/Tomcat - COOKIES
-------------------------------------------------------------------------------------------
TOMCAT en ECLIPSE

Anotaciones -> valen para configurar. Hoy en día, la tendencia es ir pasando a anotaciones 
las configuraciones de web.xml (descriptor de despliegue).

Eclipse y Tomcat a veces no se sincronizan bien y pueden aparecer problemas.
- Problemas al arrancar el servidor. 
	Puede entrar en conflicto con la otra instancia de Tomcat.
	Puede no reflejar bien la publicación de los proyectos.
	Posibles soluciones:
	- Rearrancar el servidor.
	- Comprobar lo que tiene publicado. Suele dejar trozos de un proyecto al desplegarlo...
		(Nos recomienda tener siempre abierta la carpeta donde está el proyecto en eclipse).
		Para evitarlo, se puede usar la opción clean sobre el servidor.

__________________________________________________________________________________________________
DESARROLLO EN ENTORNO SERVIDOR

Formularios
Es muy habitual trabajar con formularios. Lo primero es asegurarnos de que los parámetros 
llegan bien y se tratan bien.

Ejemplo: alta en la web de GitHub.
Primera petición (en el cliente): http://github.com. [SOLICITUD1]
El servidor lo recibe y devuelve la página por defecto (index.hmtl). [RESPUESTA1]
Supongamos que esa página es el formulario de alta, con campos y botones.
El cliente lo rellena y clica "alta". [SOLICITUD2]
El servidor recibe los valores. Eso no quiere decir que los datos estén bien. Aunque se pinte
bien no quiere decir que se estén enviando bien los datos. Aquí se puede dedicar tiempo a repasar
formularios y HTTP.
	Posibles errores: de etiquetas, de atributos, de ... 
Cuestiones varias de envío:
	los text se envían siempre; los botones de radio, si no se pone ninguno, no se envía;...
	(hay un pdf sobre este tema: dia2-3.envio de parametros).



En la Vista Problems me muestra errores que están pendientes.
Otra Vista disponible para ello es ErrorLog.

Al traer otro proyecto de Eclipse, se da cuenta de que no tengo la misma infraestructura y se queja.
Tengo que ajustarlo a la infraestructura que tengo. Lo puedo cambiar en Properties.
	- Targeted Runtimes -> Los entornos de ejecución que tengo. Ahí indico la versión de Tomcat.
	- Java Build Path 
	
Repintado de datos del formulario -> no perderlos. Fundamental para no desanimarse.

Usamos el ejemplo EnviaYRecibe
Comentarios al respecto:

___________________________________________________________________________________________
MANTEMINIMIENTO DEL ESTADO - COOKIES

¿Dónde se guardan? En el cliente.
¿Quién hace que se guarden? El servidor.

El cliente se conecta al servidor. El servidor envía las cookies. Cuando te sale el mensaje
de si las quieres, ya las tienes contigo.

Valen para guardar cosas en el cliente, cosas normalmente no muy importantes.
Si son muy importantes, como el cliente puede desactivarlos, es posible que no funcione.
El clientes las puede borrar, modificar, desactivar... Por eso no son muy seguras.

¿Cómo funciona una cookie? Casi siempre tienen que ver con preferencias de navegación.
La primera vez que las colocas, te las coloca el servidor. A partir de entonces, cuando 
te vuelves a conectar, el servidor te tiene fichado.

Es texto. Todo lo que podamos meter en texto. Un objeto, por ejemplo.

Se crea como si fuera un objeto con ciertos atributos. El mínimo es el nombre, pero puede 
haber muchas más. Se le puede asociar un valor hash al que entra y usar eso en nuestra
bd para tener información de las preferencias de navegación o compra.

Cookies de terceros. Un servidor me pone etiquetas y se las manda a otros servidores.
(Ej: howsuffworks.com)

Las cookies las establece el servidor en el response headers con setCookie. Después,
al volver a entrar, las envía el cliente en request headers en cookies.

Dentro de la cookie, se localiza primero el servidor. Luego se mira la ruta y si es / 
se envía para todas las páginas de ese servidor. Si es, por ejemplo /primero, sólo se envían
para los recursos en los que aparezca ese texto en la ruta. Simplificación: asociarlo
siempre a la raíz.

Otra cosa interesante a la hora de depurar un poco, es enviar cosas a la consola, 
además de al flujo de salida.

diferencia en un formulario
- limpiar borra los valores.
- reset lo deja como estaba la primera vez.


DIA4 - LOCAL STORAGE - GIT - SESIONES
-------------------------------------------------------------------------------------------
LOCAL STORAGE (alternativa a cookies)

En inspeccionar, chrome, Application, vemos Local Storage y Session Storage.
Local Storage: bd en local de las visitas. Se manteniene aunque se cierre el navegador.
Session Storage: bd en local de las sesiones. Se manteniene hasta que se cierra el navegador.

Hay un ejercicio para ver esto (ContadorVisitasLocalStorage.html). En JavaScript.

___________________________________________________________________________________________________
GIT - GITHUB

GitHub. Almacén de proyectos supervisadas por Git. Permite varias versiones del mismo proyecto
(ramas). Se pueden crear, cerrar, fusionar...

Cada proyecto, un repositorio. Se almacenan en GitHub, pero se suelen trabajar en local y 
gestionar con un cliente GIT.

Cliente GIT en línea de comandos. Vale para tener claro todo lo que hay que hacer (que se 
suele esconder en los clientes integrados).
Simula un linux sobre un windows (se ve fácil con pwd).

Primer paso: ¿cómo sé que un proyecto está supervisado por GIT? GIT usa una estructura especial
de metainformación para su repositorio.

Si un archivo existe, pero no está "trackeado" es como si no existiera para git. Se denomina
"Untracked". Un archivo de este tipo nunca será fotocopiado cuando guarde una instantánea del 
proyecto. 

Podemos pasar un archivo a estado "tracked" (supervisado). Entonces ya le incluye en su 
supervisión y nos da información sobre él (git add ...). Confirmarlo es "hacerle una foto"
(commit).

git tiene configuración a tres niveles (git config):
- para todos los usuarios del equipo. system.
- para nivel de usuario. global. para mi usuario.
- por repositorio. local.

para sincronizar, se trae la copia central y trata de ajustarlo en local. una vez ajustado
se puede subir al servidor (copia central).

al hacer commit, te dice si ha cambiado archivos enteros y si ha escrito o borrado alguna
línea.

dentro de .git, hay un archivo HEAD, que tiene "un puntero" al punto de desarrollo en el que 
está el proyecto (el último commit).

En el repositorio en github
README.md -> comentario general explicando para qué es el proyecto.
.gitignore -> lo que le decimos que ignore (a git). Como mínimo, las típicas librerías.
licencia -> bajo qué licencia está.

cuando hacemos un clon de un repositorio remoto, al original lo llama "origin". Crea dos "tubos"
uno para subir y otro para bajar. el push es para subir del local al remoto y el fetch/pull para 
bajar las modificaciones del remoto al local.

versiones alternativas
- con ramas, hay posibilidades alternativas, pero dentro de un mismo proyecto.
- con fork. es una copia de un repositorio en mi cuenta remota.

___________________________________________________________________________________________________
SESIONES 

En HTTP no hay sesiones. Mantener el estado es mantener información de una conexión a la siguiente.
Se soluciona con sesiones.

Sesiones es información que los servlets escriben y guardan en algún sitio (memoria, disco...) de 
una conexión a la siguiente. Se puede guardar dentro lo que queramos (testo, objetos...).

Un uso común en la autenticación de correo sería tener una base de datos donde guarda los datos
de los usuarios (como objetos, por ejemplo). Y guarda ese objeto usuario en la sesión. La sesión
es como un saco donde se guarda esa información; que está en el servidor. Sería un arraylist o
un mapa de String-Object. Cada entrada va a tener una etiqueta y un objeto, del tipo que sea.

RegistroPorPasos
Aquí el servlet es el C. el JSP es la V. y Datos.java es el M. (MVC)
La barra de navegación permite navegar, pero no graba nada. Para grabar, botón grabar.
En realidad lo hace pasando parámetros de un servlet al siguiente, para que los pueda 
guardar el servidor en su sesión.

JSP es una herramienta que genera HTML. Si le paso un literal, lo incluye. Si recibe un nombre, 
tengo que pasárselo. Es un Pintador, de lo que le pasa el servlet. Para parárselo, se carga
con más información la request. El servlet le va a pasar todo su contexto (incluyendo request y
response) al JSP.
Para ello se usa un RequestDispatcher, con el que se le pasa el control al JSP. En realidad, un
JSP es un servlet (con su capa exterior de formateo de datos).
Etiquetas:
- <% código java sin más %>
- <%= echo_del_valor_de_una_variable %>
- <jsp:include > permite incluir código de jsp y pasar parámetros

(los servlets están empezando a quedarse obsoletos. Ahora se recomienda la API MVC).

Uso de las sesiones:  para una ejecución continua.

La depuración de estos códigos es muy interesante.

¿Cómo consigue la sesión saber que existe? Cuando me conecto por segunda vez, el navegador 
sabe que existe la sesión. En realidad, se hace con una cookie, donde el servidor le pasa
antes al cliente el identificador de la sesión. Y cuando vuelve, el cliente le pasa ese 
valor de sesión al servidor.
















---------------------------------------------------------------------------------------------------
CONCEPTOS GENERALES DEL CURSO
- FDBC es un API (conjunto de clases que trabajan en conjunto para hacer una tarea determinada). 
Hibernate es un ORM (traductor POO-MR).
- .war. Es como un .jar, pero para aplicación de servidor. Está comprimido. Si miramos dentro, 
podemos var las .class (que son servlets compilados, ya en bytecode). Para ver el código java,
necesitamos un DECOMPILADOR (o javap), que toma el .class y te da el .java.
- gestión de procesos en windows
	- tasklist. es como ps.
	- taskkill. es kill.
	- sc. es como services.msc
- XSTL. Hoja de transformaciones, que se aplican a otro documento de entrada. Es un XML que tiene
instrucciones para transformar la entrada en otra salida. Puede generar varios formatos de salida.
No es lo mismo que JSP.
- cheat sheet - chuleta con lo más importante comprimido y preparado para una hoja.
- CSSSprite -> Un collage de imágenes que mi página va a usar. Así bajamos solo una imagen y 
con CSS se selecciona lo que se muestra, con coordenadas.
- CURL - cliente universal en linea de comandos. para cualquier servicio, crea solicitudes. es
ideal para simular peticiones.
___________________________________________________________________________________________________
ENLACES DEL CURSO
* JSR - es el equivalente en java de un un RFC de redes. - https://jcp.org/en/jsr/all. Cada API tiene
aquí un documento que las describe en profundidad. Aquí está toda la información PROFUNDA.
* Cosas de redes en inglés - http://howstuffworks.com
___________________________________________________________________________________________________
IDEAS PEDAGÓGICAS
* Hacer un documento colaborativo, de documentación. Suma de aportaciones. Trabajo que queda 
publicado con creativecommons.
* Pasar los equipos a Linux.
* Usar GitHub desde el principio del curso. Fomentar que los alumnos lo empleen.
jose.r.rodriguez.s@gmail.com

idea tarea: dos alumnos que usen git y se pisen el código.